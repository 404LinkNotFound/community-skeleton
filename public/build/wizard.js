/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/scripts/wizard.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/scripts/wizard.js":
/*!**********************************!*\
  !*** ./public/scripts/wizard.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function ($) {\n  // Wait for all assets to load\n  $(window).bind(\"load\", function () {\n    var UVDeskCommunityInstallSetupView = Backbone.View.extend({\n      el: '#wizardContent',\n      wizard: undefined,\n      installation_setup_template: _.template($(\"#installationWizard-InstallSetupTemplate\").html()),\n      installation_process_template: _.template($(\"#installationWizard-InstallSetupTemplate-ProcessingItem\").html()),\n      installation_successfull_template: _.template($('#installationWizard-InstallationCompleteTemplate').html()),\n      events: {\n        'click #wizardCTA-CancelInstallation': 'abortInstallation',\n        'click #wizardCTA-StartInstallation': 'installHelpdesk'\n      },\n      initialize: function initialize(params) {\n        this.wizard = params.wizard;\n        this.wizard.reference_nodes.content.html(this.installation_setup_template());\n      },\n      installHelpdesk: function installHelpdesk(params) {\n        this.updateConfigurations();\n      },\n      updateConfigurations: function updateConfigurations() {\n        var self = this;\n        var promise = new Promise(function (resolve, reject) {\n          $.post('/setup/xhr/load/configurations', function (response) {\n            resolve(response);\n          }).fail(function (response) {\n            reject(response);\n          });\n        });\n        this.$el.find('#wizard-finalizeInstall').html(this.installation_process_template({\n          currentStep: 'load-configurations'\n        }));\n        promise.then(function (response) {\n          console.log('configurations updated:', response);\n          self.loadMigrations();\n        });\n      },\n      loadMigrations: function loadMigrations() {\n        var self = this;\n        var promise = new Promise(function (resolve, reject) {\n          self.wizard.showLoader();\n          $.post('/setup/xhr/load/migrations', function (response) {\n            resolve(response);\n          }).fail(function (response) {\n            reject(response);\n          });\n        });\n        this.$el.find('#wizard-finalizeInstall').html(this.installation_process_template({\n          currentStep: 'load-migrations'\n        }));\n        promise.then(function (response) {\n          console.log('migrations loaded:', response);\n          self.populateDatasets();\n        });\n      },\n      populateDatasets: function populateDatasets() {\n        var self = this;\n        var promise = new Promise(function (resolve, reject) {\n          $.post('/setup/xhr/load/entities', function (response) {\n            resolve(response);\n          }).fail(function (response) {\n            reject(response);\n          });\n        });\n        this.$el.find('#wizard-finalizeInstall').html(this.installation_process_template({\n          currentStep: 'populate-datasets'\n        }));\n        promise.then(function (response) {\n          self.createDefaultSuperUser();\n        });\n      },\n      createDefaultSuperUser: function createDefaultSuperUser() {\n        var self = this;\n        var promise = new Promise(function (resolve, reject) {\n          $.post('/setup/xhr/load/super-user', function (response) {\n            resolve(response);\n          }).fail(function (response) {\n            reject(response);\n          });\n        });\n        this.$el.find('#wizard-finalizeInstall').html(this.installation_process_template({\n          currentStep: 'create-super-user'\n        }));\n        promise.then(function (response) {\n          self.redirectToWelcomePage();\n        });\n      },\n      redirectToWelcomePage: function redirectToWelcomePage() {\n        this.wizard.hideLoader();\n        this.$el.html(this.installation_successfull_template());\n      }\n    });\n    var UVDeskCommunityWebsiteConfigurationModel = Backbone.Model.extend({\n      defaults: {\n        member_panel_url: \"/en/member/login\",\n        customer_panel_url: \"/en/customer/login\"\n      },\n      initialize: function initialize(attributes) {\n        this.view = attributes.view;\n      },\n      validateWebsiteConfigurations: function validateWebsiteConfigurations() {\n        return true;\n      }\n    });\n    var UVDeskCommunityWebsiteConfigurationView = Backbone.View.extend({\n      e1: '#wizard-configureWebsite',\n      model: undefined,\n      wizard: undefined,\n      wizard_system_website_configuration: _.template($(\"#installationWizard-WebsiteConfigurationTemplate\").html()),\n      events: {\n        'click #wizardCTA-CancelInstallation': function clickWizardCTACancelInstallation() {\n          debugger;\n          this.wizard.router.navigate('welcome', {\n            trigger: true\n          });\n        },\n        'click #wizardCTA-IterateInstallation-Website': function clickWizardCTAIterateInstallationWebsite(e) {\n          debugger;\n          e.preventDefault();\n\n          if (this.model.validateWebsiteConfigurations()) {\n            this.wizard.timeline[1].isChecked = true;\n            this.wizard.router.navigate('configure-database', {\n              trigger: true\n            });\n          }\n        }\n      },\n      initialize: function initialize(params) {\n        this.wizard = params.wizard;\n        this.model = new UVDeskCommunityWebsiteConfigurationModel({\n          view: self\n        }); // Render Initial Template\n\n        this.wizard.reference_nodes.content.html(this.wizard_system_website_configuration());\n      }\n    });\n    var UVDeskCommunityAccountConfigurationModel = Backbone.Model.extend({\n      view: undefined,\n      defaults: {\n        user: {\n          name: \"shubham mehrotra\",\n          email: 'shubhammehrotra.symfony@webkul.com',\n          password: 'password',\n          confirmPassword: 'password'\n        }\n      },\n      initialize: function initialize(attributes) {\n        this.view = attributes.view;\n      },\n      verifyAccountDetails: function verifyAccountDetails() {\n        var self = this;\n        console.log({\n          name: this.view.$el.find('input[name=\"name\"]').val(),\n          email: this.view.$el.find('input[name=\"email\"]').val(),\n          password: this.view.$el.find('input[name=\"password\"]').val(),\n          confirmPassword: this.view.$el.find('input[name=\"confirm_password\"]').val()\n        });\n        this.set('user', {\n          name: this.view.$el.find('input[name=\"name\"]').val(),\n          email: this.view.$el.find('input[name=\"email\"]').val(),\n          password: this.view.$el.find('input[name=\"password\"]').val(),\n          confirmPassword: this.view.$el.find('input[name=\"confirm_password\"]').val()\n        });\n        $.post('/setup/xhr/intermediary/super-user', {\n          name: self.get('user').name,\n          email: self.get('user').email,\n          password: self.get('user').password\n        }, function (response) {\n          if (typeof response.status != 'undefined' && true === response.status) {\n            self.view.wizard.timeline[2].isChecked = true;\n            self.view.navigateToInstallation();\n          }\n        }).fail(function (response) {\n          console.log('fail:', response);\n        });\n        return true;\n      }\n    });\n    var UVDeskCommunityAccountConfigurationView = Backbone.View.extend({\n      el: '#wizardContent',\n      model: UVDeskCommunityAccountConfigurationModel,\n      wizard: undefined,\n      account_settings_template: _.template($(\"#installationWizard-AccountConfigurationTemplate\").html()),\n      events: {\n        'click #wizardCTA-CancelInstallation': 'abort',\n        'click #wizardCTA-IterateInstallation-SuperUser': 'processAccountConfiguration',\n        'submit form[name=\"wizardForm-ConfigureAccount\"]': 'processAccountConfiguration'\n      },\n      initialize: function initialize(params) {\n        var self = this;\n        Backbone.Validation.bind(self);\n        this.wizard = params.wizard;\n        this.model = new UVDeskCommunityAccountConfigurationModel({\n          view: self\n        });\n        this.wizard.reference_nodes.content.html(this.account_settings_template(this.model.attributes));\n      },\n      abort: function abort() {\n        this.wizard.router.navigate('welcome', {\n          trigger: true\n        });\n      },\n      navigateToInstallation: function navigateToInstallation() {\n        // var form_data = {\n        //     name: this.$el.find('input[name=\"name\"]').val(),\n        //     email: this.$el.find('input[name=\"email\"]').val(),\n        //     password: this.$el.find('input[name=\"password\"]').val(),\n        //     confirm_password: this.$el.find('input[name=\"confirm_password\"]').val(),\n        // };\n        // // console.log(this.model.toJSON());\n        // if (this.isAccountConfigurationVerified(form_data)){\n        this.wizard.router.navigate('website-configure', {\n          trigger: true\n        }); // } else {\n        //     console.log('false');\n        // }\n      },\n      validateEmail: function validateEmail(email) {\n        var filter = /^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n\n        if (filter.test(email)) {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      isAccountConfigurationVerified: function isAccountConfigurationVerified(data) {\n        $('.error_message').html('');\n\n        if (data.name == null || data.name == \"\") {\n          this.$el.find('input[name=\"name\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.email == null || data.email == \"\") {\n          this.$el.find('input[name=\"email\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (!this.validateEmail(data.email)) {\n          this.$el.find('input[name=\"email\"]').after(\"<span class='error_message'>Invalid Email</span>\");\n          return false;\n        }\n\n        if (data.password == null || data.password == \"\") {\n          this.$el.find('input[name=\"password\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.confirm_password == null || data.confirm_password == \"\") {\n          this.$el.find('input[name=\"confirm_password\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.confirm_password != data.password) {\n          this.$el.find('input[name=\"confirm_password\"]').after(\"<span class='error_message'>This Password does not matched </span>\");\n          return false;\n        }\n\n        return true;\n      },\n      disableNextStep: function disableNextStep() {\n        this.$el.find('#wizardCTA-IterateInstallation').attr('disabled', 'disabled');\n      },\n      processAccountConfiguration: function processAccountConfiguration(e) {\n        e.preventDefault();\n        this.model.verifyAccountDetails();\n        return false;\n      }\n    });\n    var UVDeskCommunityDatabaseConfigurationModel = Backbone.Model.extend({\n      view: undefined,\n      defaults: {\n        verified: false,\n        credentials: {\n          hostname: 'localhost',\n          username: 'root',\n          password: 'webkul',\n          database: 'community'\n        }\n      },\n      initialize: function initialize(attributes) {\n        this.view = attributes.view;\n      },\n      verifyDatabaseCredentials: function verifyDatabaseCredentials() {\n        var self = this;\n        this.set('credentials', {\n          hostname: this.view.$el.find('input[name=\"hostname\"]').val(),\n          username: this.view.$el.find('input[name=\"username\"]').val(),\n          password: this.view.$el.find('input[name=\"password\"]').val(),\n          database: this.view.$el.find('input[name=\"database\"]').val()\n        });\n        $.post('/setup/xhr/verify-database-credentials', self.get('credentials'), function (response) {\n          if (typeof response.status != 'undefined' && true === response.status) {\n            self.view.wizard.timeline[1].isChecked = true;\n            self.view.navigateToAccountConfiguration();\n          }\n        }).fail(function (response) {\n          console.log('fail:', response);\n        });\n      }\n    });\n    var UVDeskCommunityDatabaseConfigurationView = Backbone.View.extend({\n      el: '#wizardContent',\n      model: undefined,\n      wizard: undefined,\n      database_configuration_template: _.template($(\"#installationWizard-DatabaseConfigurationTemplate\").html()),\n      events: {\n        'click #wizardCTA-CancelInstallation': 'abort',\n        'click #wizardCTA-IterateInstallation-Database': 'processDatabaseConfiguration',\n        'submit form[name=\"wizardForm-ConfigureDatabase\"]': 'processDatabaseConfiguration'\n      },\n      initialize: function initialize(params) {\n        var self = this;\n        this.wizard = params.wizard;\n        this.model = new UVDeskCommunityDatabaseConfigurationModel({\n          view: self\n        }); // Render Initial Template\n\n        this.wizard.reference_nodes.content.html(this.database_configuration_template(this.model.attributes));\n      },\n      abort: function abort() {\n        this.wizard.router.navigate('welcome', {\n          trigger: true\n        });\n      },\n      navigateToAccountConfiguration: function navigateToAccountConfiguration() {\n        this.wizard.router.navigate('create-admin', {\n          trigger: true\n        });\n      },\n      disableNextStep: function disableNextStep() {\n        this.$el.find('#wizardCTA-IterateInstallation').attr('disabled', 'disabled');\n      },\n      validateFormData: function validateFormData(data) {\n        $('.error_message').html('');\n\n        if (data.hostname == null || data.hostname == \"\") {\n          this.$el.find('input[name=\"hostname\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.username == null || data.username == \"\") {\n          this.$el.find('input[name=\"username\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.password == null || data.password == \"\") {\n          this.$el.find('input[name=\"password\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        if (data.database == null || data.database == \"\") {\n          this.$el.find('input[name=\"database\"]').after(\"<span class='error_message'>This field is mendatory</span>\");\n          return false;\n        }\n\n        return true;\n      },\n      processDatabaseConfiguration: function processDatabaseConfiguration(e) {\n        e.preventDefault();\n        var formData = {\n          hostname: this.$el.find('input[name=\"hostname\"]').val(),\n          username: this.$el.find('input[name=\"username\"]').val(),\n          password: this.$el.find('input[name=\"password\"]').val(),\n          database: this.$el.find('input[name=\"database\"]').val()\n        };\n\n        if (this.validateFormData(formData)) {\n          this.model.verifyDatabaseCredentials();\n        }\n\n        return false;\n      }\n    });\n    var UVDeskCommunitySystemRequirementsModel = Backbone.Model.extend({\n      view: undefined,\n      defaults: {\n        'verified': false,\n        'php-version': {\n          status: undefined\n        },\n        'php-extensions': {\n          status: undefined\n        }\n      },\n      initialize: function initialize(attributes) {\n        this.view = attributes.view;\n      },\n      fetch: function fetch() {\n        this.checkPHP();\n        this.evaluatePHPExtensions();\n      },\n      validateSystemRequirements: function validateSystemRequirements() {\n        if (false == this.get('php-version').status) {\n          this.set('verified', false);\n        } else if (false == this.get('php-extensions').status) {\n          this.set('verified', false);\n        } else {\n          this.set('verified', true);\n        }\n\n        if (true === this.get('verified')) {\n          this.view.enableNextStep();\n          return true;\n        }\n\n        return false;\n      },\n      checkPHP: function checkPHP() {\n        var self = this;\n        var postData = {\n          specification: 'php-version'\n        };\n        $.post('/setup/xhr/check-requirements', postData, function (response) {\n          self.set('php-version', response);\n          self.view.renderPHPVersion();\n        }).fail(function (response) {\n          self.set('php-version', {\n            status: false\n          });\n          self.view.renderPHPVersion();\n        }).always(function () {\n          self.validateSystemRequirements();\n        });\n      },\n      evaluatePHPExtensions: function evaluatePHPExtensions() {\n        var self = this;\n        var postData = {\n          specification: 'php-extensions'\n        };\n        $.post('/setup/xhr/check-requirements', postData, function (response) {\n          self.set('php-extensions', response);\n          self.view.renderPHPExtensionsCriteria();\n        }).fail(function () {\n          self.set('php-extensions', {\n            status: false\n          });\n          self.view.renderPHPExtensionsCriteria();\n        }).always(function () {\n          self.validateSystemRequirements();\n        });\n        ;\n      }\n    });\n    var UVDeskCommunitySystemRequirementsView = Backbone.View.extend({\n      el: '#wizardContent',\n      model: undefined,\n      wizard: undefined,\n      reference_nodes: {\n        version: undefined,\n        extension: undefined\n      },\n      wizard_system_requirements_template: _.template($(\"#installationWizard-SystemRequirementsTemplate\").html()),\n      wizard_system_requirements_php_ver_template: _.template($(\"#installationWizard-SystemRequirementsTemplate-PHPVersion\").html()),\n      wizard_system_requirements_php_ext_template: _.template($(\"#installationWizard-SystemRequirementsTemplate-PHPExtensions\").html()),\n      events: {\n        'click #wizardCTA-CancelInstallation': function clickWizardCTACancelInstallation() {\n          this.wizard.router.navigate('welcome', {\n            trigger: true\n          });\n        },\n        'click #wizardCTA-IterateInstallation': function clickWizardCTAIterateInstallation() {\n          if (this.model.validateSystemRequirements()) {\n            this.wizard.timeline[0].isChecked = true;\n            this.wizard.router.navigate('configure-database', {\n              trigger: true\n            });\n          }\n        }\n      },\n      initialize: function initialize(params) {\n        var self = this;\n        this.wizard = params.wizard;\n        this.model = new UVDeskCommunitySystemRequirementsModel({\n          view: self\n        }); // Render Initial Template\n\n        this.wizard.reference_nodes.content.html(this.wizard_system_requirements_template()); // Set reference nodes\n\n        this.reference_nodes.version = this.$el.find('#systemCriteria-PHPVersion');\n        this.reference_nodes.extension = this.$el.find('#systemCriteria-PHPExtensions');\n        this.renderPHPVersion();\n        this.renderPHPExtensionsCriteria();\n        this.model.fetch();\n      },\n      enableNextStep: function enableNextStep() {\n        this.$el.find('#wizardCTA-IterateInstallation').removeAttr('disabled');\n      },\n      disableNextStep: function disableNextStep() {\n        this.$el.find('#wizardCTA-IterateInstallation').attr('disabled', 'disabled');\n      },\n      renderPHPVersion: function renderPHPVersion() {\n        this.reference_nodes.version.html(this.wizard_system_requirements_php_ver_template(this.model.get('php-version')));\n      },\n      renderPHPExtensionsCriteria: function renderPHPExtensionsCriteria() {\n        this.reference_nodes.extension.html(this.wizard_system_requirements_php_ext_template(this.model.get('php-extensions')));\n      }\n    });\n    var UVDeskCommunitySliderView = Backbone.View.extend({\n      el: '#slider',\n      'listTemplate': \"<ul id=\\\"slider-list-collection\\\">\\n                <li id=\\\"welcome\\\" class=\\\"active\\\"></li>\\n                <li id=\\\"check-requirements\\\"></li>\\n                <li id=\\\"configure-database\\\"></li>\\n                <li id=\\\"create-admin\\\"></li>\\n                <li id=\\\"website-configure\\\"></li>\\n                <li id=\\\"install\\\"></li>\\n            </ul>\",\n      // 'buttonTemplate': `<div class=\"btn-collection\">\n      //     <button type=\"button\" id=\"previous\">Previous</button>\n      //     <button type=\"button\" id=\"next\">Next</button>\n      // </div>`,\n      initialize: function initialize(step) {\n        $('#slider').html(this.listTemplate); // $('#slider').append(this.buttonTemplate);\n\n        $('#slider li.active').removeClass('active');\n        $('#slider #' + step).addClass('active');\n      },\n      previous: function previous() {\n        var previousElement = this.findSibling({\n          'period': 'previous',\n          'selector': '#slider ul li.active',\n          'currentElement': true\n        });\n\n        if (previousElement['currentElement'] && previousElement['previousElement']) {\n          // activate previous element\n          previousElement['previousElement'].classList.add('active');\n          previousElement['currentElement'].classList.remove('active');\n        }\n      },\n      next: function next() {\n        var nextElement = this.findSibling({\n          'period': 'next',\n          'selector': '#slider ul li.active',\n          'currentElement': true\n        });\n\n        if (nextElement['currentElement'] && nextElement['nextElement']) {\n          // activate next element\n          nextElement['nextElement'].classList.add('active');\n          nextElement['currentElement'].classList.remove('active');\n        }\n      },\n      findSibling: function findSibling(_ref) {\n        var period = _ref.period,\n            selector = _ref.selector,\n            currentElement = _ref.currentElement;\n        var result = {\n          'currentElement': null\n        };\n        result[period + 'Element'] = null;\n        var activeElement = document.querySelector(selector);\n\n        if (activeElement) {\n          if (activeElement[period + 'ElementSibling']) result[period + 'Element'] = activeElement[period + 'ElementSibling'];\n        }\n\n        if (currentElement) result['currentElement'] = activeElement;\n        return result;\n      }\n    });\n    var InstallationWizard = Backbone.View.extend({\n      el: '#wizard',\n      router: {},\n      enabled: false,\n      reference_nodes: {\n        header: undefined,\n        content: undefined\n      },\n      wizard_default_header_template: _.template($(\"#installationWizard-DefaultHeaderTemplate\").html()),\n      wizard_default_content_template: _.template($(\"#installationWizard-DefaultContentTemplate\").html()),\n      events: {\n        'click #wizardCTA-StartInstallation': function clickWizardCTAStartInstallation() {\n          this.enabled = true;\n          this.router.navigate('check-requirements', {\n            trigger: true\n          });\n        }\n      },\n      timeline: [{\n        isChecked: false,\n        path: 'check-requirements',\n        view: UVDeskCommunitySystemRequirementsView\n      }, {\n        isChecked: false,\n        path: 'configure-database',\n        view: UVDeskCommunityDatabaseConfigurationView\n      }, {\n        isChecked: false,\n        path: 'create-admin',\n        view: UVDeskCommunityAccountConfigurationView\n      }, {\n        isChecked: false,\n        path: 'website-configure',\n        view: UVDeskCommunityWebsiteConfigurationView\n      }, {\n        isChecked: false,\n        path: 'install',\n        view: UVDeskCommunityInstallSetupView\n      }],\n      initialize: function initialize(params) {\n        this.router = params.router;\n        this.reference_nodes.header = this.$el.find('#wizardHeader');\n        this.reference_nodes.content = this.$el.find('#wizardContent');\n        this.renderWizard();\n      },\n      iterateInstallationSteps: function iterateInstallationSteps(iteration) {\n        if ('welcome' === iteration) {\n          this.enabled = false;\n          this.timeline[0].isChecked = false;\n          this.timeline[1].isChecked = false;\n          this.timeline[2].isChecked = false;\n          this.timeline[3].isChecked = false;\n          this.timeline[4].isChecked = false;\n          this.renderWizard();\n        } else {\n          if (!this.enabled) {\n            this.router.navigate('welcome', {\n              trigger: true\n            });\n          } else {\n            var _self = this; // console.log(\"installationStep in router : \",installationStep);\n\n\n            this.timeline.every(function (installationStep) {\n              if (iteration == installationStep.path && typeof installationStep.view != 'undefined') {\n                _self.renderWizardInstallationStep(installationStep.view);\n\n                return false;\n              } else if (installationStep.isChecked) {\n                return true;\n              }\n\n              _self.router.navigate('welcome', {\n                trigger: true\n              });\n\n              return false;\n            });\n          }\n        }\n      },\n      renderWizard: function renderWizard() {\n        var self = this;\n        this.reference_nodes.header.html(self.wizard_default_header_template());\n        this.reference_nodes.content.html(self.wizard_default_content_template());\n      },\n      renderWizardInstallationStep: function renderWizardInstallationStep(InstallationWizardTemplateView) {\n        var self = this;\n        this.reference_nodes.content.empty();\n        new InstallationWizardTemplateView({\n          wizard: self\n        });\n      },\n      showLoader: function showLoader() {\n        $('#uv-def-loader').css('display', 'unset');\n      },\n      hideLoader: function hideLoader() {\n        $('#uv-def-loader').css('display', 'none');\n      }\n    });\n    var Router = Backbone.Router.extend({\n      wizard: undefined,\n      routes: {\n        ':installationStep': 'iterateInstallationProcedure'\n      },\n      initialize: function initialize() {\n        var self = this; // Initialize installation wizard\n\n        this.wizard = new InstallationWizard({\n          router: self\n        });\n      },\n      iterateInstallationProcedure: function iterateInstallationProcedure(installationStep) {\n        this.showInstallationStep = new UVDeskCommunitySliderView(installationStep);\n        this.wizard.iterateInstallationSteps(installationStep);\n      }\n    });\n    var router = new Router();\n    Backbone.history.start({\n      push_state: true\n    });\n  });\n})(jQuery);\n\n//# sourceURL=webpack:///./public/scripts/wizard.js?");

/***/ })

/******/ });